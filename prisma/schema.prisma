// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/db"
  fileName     = "types.ts"
  enumFileName = "enums.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  username String  @id
  password String
  pfp      String?
  aura     Int     @default(0)
  bio      String?

  joined               members[]
  posts                posts[]
  communities          communities[]
  comments             comments[]
  post_interactions    post_interactions[]
  comment_interactions comment_interactions[]
}

model communities {
  name        String  @id
  description String?
  owner       String

  user    users     @relation(fields: [owner], references: [username])
  posts   posts[]
  members members[]
}

model posts {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  community_id String
  username     String
  title        String
  votes        Int      @default(0)
  content      String?
  image        String?
  created_at   DateTime @default(now())

  user        users               @relation(fields: [username], references: [username])
  community   communities         @relation(fields: [community_id], references: [name])
  comments    comments[]
  interaction post_interactions[]
}

model members {
  community_id String
  username     String

  user      users       @relation(fields: [username], references: [username])
  community communities @relation(fields: [community_id], references: [name])

  @@id([username, community_id])
}

model comments {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  post_id   String  @db.Uuid
  content   String
  parent_id String? @db.Uuid
  author    String

  parent               comments?              @relation(name: "parent", fields: [parent_id], references: [id])
  posts                posts                  @relation(fields: [post_id], references: [id])
  children             comments[]             @relation(name: "parent")
  users                users?                 @relation(fields: [author], references: [username])
  comment_interactions comment_interactions[]
}

enum Interaction {
  UPVOTE
  DOWNVOTE
}

model post_interactions {
  post_id String      @db.Uuid
  user_id String
  type    Interaction

  posts posts @relation(fields: [post_id], references: [id])
  users users @relation(fields: [user_id], references: [username])

  @@id([post_id, user_id])
}

model comment_interactions {
  comment_id String      @db.Uuid
  user_id    String
  type       Interaction

  comments comments @relation(fields: [comment_id], references: [id])
  users    users    @relation(fields: [user_id], references: [username])

  @@id([comment_id, user_id])
}
